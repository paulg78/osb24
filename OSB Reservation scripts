const RESFORM = "1SfYwt1dFT2KnzOM1T1iZHNelfhCPh2Qz0C4s7cU4oko"

/* This function is only used to get the question IDs */
function identifyQuestions() {
  var form = FormApp.openById(RESFORM)
  var questions = form.getItems()
  questions.forEach(question => {
    Logger.log(question.getTitle())
    Logger.log(question.getType())
    Logger.log(question.getId().toString())
  })
}

/* This function needs to be run when there is a change to the school list on the spreadsheet */
/* If we want it to run automatically, need a trigger to run it when there is an edit to the spreadsheet */
function updateSchools() {
  var ws = SpreadsheetApp.getActiveSpreadsheet()
  var options_ws = ws.getSheetByName("Schools")
  var optionsArray = options_ws.getRange("A2:A").getValues()
  /*   Logger.log(optionsArray) */
  var filteredOptionArray = optionsArray.filter(row => row[0])
  /*  Logger.log(filteredOptionArray) */
  var optionsList = filteredOptionArray.map(row => row[0])
  /*  Logger.log(optionsList) */
  var form = FormApp.openById(RESFORM)
  var schoolQuestion = form.getItemById("325120643")
  schoolQuestion.asListItem().setChoiceValues(optionsList)
}

/* This function updates the list of available time slots on the reservation form */
/* there is a trigger to call this function when there is any edit to the spreadsheet */
function updateTimeSlots(e) {
  var sheet;
  if (e == null) { /* Called by updateQuota */
    sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("TimeSlots");
  }
  else { /* triggered by spreadsheet edit */
    sheet = e.range.getSheet();
    var col = e.range.getColumn();
    /* return if not changing Time Slot worksheet */
    if (sheet.getName() !== 'TimeSlots' || (col !== 1 && col !== 3)) {
      /* Logger.log("timeslot value not changed"); */
      return;
    }
    if (col == 1) {
      var row = e.range.getRow();
      sheet.getRange(row, 2).setFormula("=TO_TEXT(" + "A" + row + ")");
    }
  }

  var optionsArray = sheet.getRange("B2:C").getValues()
  /* Logger.log(optionsArray) */
  var filteredOptionArray = optionsArray.filter(row => row[1] > 0)
  /* Logger.log(filteredOptionArray) */
  var optionsList = filteredOptionArray.map(row => row[0])
  /* Logger.log(optionsList) */
  var form = FormApp.openById(RESFORM)
  var timeSlotQuestion = form.getItemById("2077309311")
  timeSlotQuestion.asMultipleChoiceItem().setChoiceValues(optionsList)
}

/* This updates the available count and then calls updateTimeSlots to update the list of available time slots */
/* there is a trigger to call this function when the form is submitted */
function updateQuota(e) {
  /*   Logger.log('range=' + JSON.stringify(e.range))
    Logger.log('nvJSON=' + JSON.stringify(e.namedValues));
    Logger.log('values=' + JSON.stringify(e.values));
    Logger.log('authMode=' + JSON.stringify(e.authMode)); */
  var ts = e.namedValues['Time Slot']
  if (ts == "") { /* This is an edit with no change to time slot so can't update quota */
    /*  Logger.log("edit form submitted with no change to timeslot"); */
    return;
  }
  var ws = SpreadsheetApp.getActiveSpreadsheet()
  var options_ws = ws.getSheetByName("TimeSlots")
  var slot = options_ws.createTextFinder(ts).findNext();
  if (slot == null) {
    Logger.log('time slot not found')
    /* don't return -- so it will fail and I'll get notification */
  }
  var row = slot.getRow()
  /* Logger.log(row) */
  var range = options_ws.getRange(row, 3)
  var avail = range.getValue();
  if (avail > 0) {
    range.setValue(avail - 1)
    if (avail == 1) {
      /* Logger.log("calling updateTimeSlots") */
      updateTimeSlots()
    }
  }
}

/* This function creates 3 worksheets, one for looking up students by time slot, one for looking up students by name, and 1 for checking reservations vs. quota by school */
function formatforCheckin() {
  /* format timestamp in responses worksheet; otherwise new entries will be in wrong format */
  var ss = SpreadsheetApp.getActive();
  var responses_ws = ss.getSheetByName("Form Responses");
  responses_ws.getRange('A:A').setNumberFormat('m"/"d"/"yyyy" "h":"mm":"ss":"000');

  /* Delete Time Slot, Student Names, and school counts worksheets if present */
  if (ss.getSheetByName('By Time Slot') != null) {
    ss.deleteSheet(ss.getSheetByName('By Time Slot'))
  }
  if (ss.getSheetByName('By Student Name') != null) {
    ss.deleteSheet(ss.getSheetByName('By Student Name'))
  }
  if (ss.getSheetByName('School Counts') != null) {
    ss.deleteSheet(ss.getSheetByName('School Counts'))
  }

  /* Create By time slot worksheet as first sheet */
  var ws = ss.insertSheet('By Time Slot', 0);

  /* Copy data from Form Responses worksheet */
  responses_ws.getRange('A:J').copyTo(ws.getRange(1, 1), SpreadsheetApp.CopyPasteType.PASTE_VALUES, false);

  /*  Logger.log('lastrow with data=' + ws.getLastRow());
   Logger.log('lastrow=' + ws.getMaxRows()); */
  var lastData = ws.getLastRow();
  ws.deleteRows(lastData + 1, ws.getMaxRows() - lastData);

  /* Re-arrange columns */
  ws.getRange('A:A').setNumberFormat('m"/"d"/"yyyy" "h":"mm":"ss":"000');
  ws.getRange('A:A').moveTo(ws.getRange('K:K'));
  ws.getRange('J:J').moveTo(ws.getRange('A:A'));
  ws.insertColumnsBefore(2, 5);
  ws.getRange('N:N').moveTo(ws.getRange('B:B'));
  ws.getRange('L:L').moveTo(ws.getRange('C:C'));
  ws.getRange('K:K').moveTo(ws.getRange('D:D'));
  ws.getRange('J:J').moveTo(ws.getRange('E:E'));
  ws.getRange('M:M').moveTo(ws.getRange('F:F'));
  ws.getRange('F1').setValue('Grade');
  ws.deleteColumns(10, 6);
  ws.getRange('C1').setValue('Last name');
  ws.getRange('D1').setValue('First name');
  ws.getRange('H1').setValue('Coun.Lastname');
  ws.getRange('I1').setValue('Coun.Firstname');
  /* Logger.log('brows=' + ws.getRange('B:B').getNumRows());
  Logger.log('ajrows=' + ws.getRange('A:J').getNumRows()); */
  ws.getRange('A:A').offset(1, 0, ws.getRange('B:B').getNumRows() - 1).insertCheckboxes();
  ws.autoResizeColumns(1, 10);

  ws.getRange('A:J').offset(1, 0, ws.getRange('A:J').getNumRows() - 1).sort([{ column: 2, ascending: true }, { column: 3, ascending: true }, { column: 4, ascending: true }]);
  ws.setFrozenRows(1);

  /* Create By Student Name worksheet from Time Slot worksheet */
  ws = ss.duplicateActiveSheet();
  ws.setName('By Student Name');
  ws.deleteColumns(1, 1); /* check in not needed */
  ws.deleteColumns(9, 1); /* timestamp not needed */
  ws.insertColumnsBefore(1, 2);
  ws.getRange('D:D').moveTo(ws.getRange('A:A'));
  ws.getRange('E:E').moveTo(ws.getRange('B:B'));
  ws.deleteColumns(4, 2);
  ws.autoResizeColumns(1, 3);
  ws.getRange('A:J').offset(1, 0, ws.getRange('A:I').getNumRows() - 1).sort([{ column: 1, ascending: true }, { column: 2, ascending: true }]);

  /* Create count by school pivot table */
  var sourceData = ws.getRange('D:D');
  ws = ss.insertSheet('School Counts', 2);
  ws.setHiddenGridlines(true);
  var pivotTable = ws.getRange('A1').createPivotTable(sourceData);
  var pivotGroup = pivotTable.addRowGroup(4);
  var pivotValue = pivotTable.addPivotValue(4, SpreadsheetApp.PivotTableSummarizeFunction.COUNTA);
  pivotValue.setDisplayName('NBR Res.');
  ws.setFrozenRows(1);
  pivotGroup.sortDescending().sortBy(pivotTable.getPivotValues()[0], []);
  ws.getRange('C1').setValue('Quota');
  ws.getRange('C2').setFormula('=VLOOKUP(A2,Schools!A:B,2,true)');
  ws.getRange('D1').setValue('Over?');
  ws.getRange('D2').setFormula('=if(B2>C2,"Over","")');
  ws.getRange('C2:D2').copyTo(ws.getRange(3, 3, ws.getLastRow() - 3, 2), SpreadsheetApp.CopyPasteType.PASTE_NORMAL, false);
  /*  Logger.log('lastrow with data=' + ws.getLastRow()); */

  ws.autoResizeColumns(1, 4);

  /* make time slot sheet active */
  ss.getSheetByName('By Time Slot').activate();
};

/* This function sets the checkin value in the response spreadsheet so they are preserved */
function updateCheckin(e) {
  var range = e.range;
  var sheet = range.getSheet();
  /* return if not checking a box on Time Slot worksheet */
  /*   Logger.log("col=" + range.getColumn()); */
  if (sheet.getName() !== 'By Time Slot' || range.getColumn() !== 1) {
    return;
  }
  /*   Logger.log("correct sheet/col"); */
  var row = range.getRow();
  var timestamp = sheet.getRange(row, 10).getValue();
  /* Logger.log('timestamp=' + timestamp); */

  var checkIn = sheet.getRange(row, 1).getValue();
  /* get timestamp into a format that can be found on reservation spreadsheet */
  /* could write my own date formatter if formatDate proves unreliable; will timezone be an issue? */
  var timefmt = Utilities.formatDate(timestamp, 'GMT-6', 'M/d/yyyy H:mm:ss:SSS');
  /*   Logger.log('tostring=' + timestamp.toString());
    Logger.log('timefmt=' + timefmt); */
  var ss = SpreadsheetApp.getActive();
  var responses_ws = ss.getSheetByName("Form Responses");
  var firstOccurrence = responses_ws.createTextFinder(timefmt).matchEntireCell(true).findNext();
  if (firstOccurrence == null) {
    Logger.log("Can't update checkin--Student not found");
    /*   don't return--so I'll get notified of failures when getRow fails */
    /* Check-in fails if there is an edit to a student after the checkin worksheet is created (because the student gets a new timestamp, which is not reflected in the by timeslot worksheet until it is re-created */
  }
  row = firstOccurrence.getRow();
  /*   Logger.log("row=" + row); */
  responses_ws.getRange(row, 10).setValue(checkIn);
}

function protectTimeSlot() {
  var ss = SpreadsheetApp.getActive();
  ss.setActiveSheet(ss.getSheetByName('By Time Slot'), true);
  var range = ss.getRange('B:J');
  var protection = range.protect();
  protection.addEditor('techsupport@al-cos.org');
  protection.removeEditors(protection.getEditors()); /* odd that this works ... why doesn't it remove the editor just added? */
  for (const editor of protection.getEditors()) {
    console.log(editor.getEmail());
  }
}

/* Form Questions -- logged by identifyQuestions
Counselor/Liaison First Name
TEXT
187723064
Counselor/Liaison Last Name
TEXT
383280843
School
LIST
325120643
Reservation
PAGE_BREAK
1534288597
Student First Name
TEXT
780686565
Student Last Name
TEXT
1474091195
Student Grade
LIST
916278863
Time Slot
MULTIPLE_CHOICE
2077309311
 */
